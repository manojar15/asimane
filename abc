grep -E "^\"[0-9]{8}\"|^{.*\"date\":\"[0-9]{8}\"}" file.json > new_file.json
grep -E '^{.*"date":("[^"]*")?}' <filename> | awk -v d=<given_date> 'BEGIN{a[1]=substr(d,1,4);a[2]=substr(d,5,2);a[3]=substr(d,7,2);a[4]=substr(d,10,2);a[5]=substr(d,12,2);a[6]=substr(d,14,2)} {gsub(/"/,""); if(substr($0,3,8)>=d) print}'


grep -E "^\"(2022(02(28|[3-9]\d)|03\d|1[0-2]\d)|2023(0[1-9]|1[0-2])\d{2})\"|^.*\"date\":\"(2022(02(28|[3-9]\d)|03\d|1[0-2]\d)|2023(0[1-9]|1[0-2])\d{2})\"" file.json > new_file.json

grep -E "^\"(2023(02(28|[3-9]\d)|03\d|1[0-2]\d)|2024(0[1-9]|1[0-2])\d{2})\"|^.*\"date\":\"(2023(02(28|[3-9]\d)|03\d|1[0-2]\d)|2024(0[1-9]|1[0-2])\d{2})\"" file.json > new_file.json
while read -r line; do first_value=$(echo "$line" | cut -d: -f1 | sed 's/"//g'); if [ "$first_value" -ge 10 ]; then echo "$line" >> output.txt; fi; done < input.json
folder="/path/to/folder"; threshold=10; for file in "$folder"/*; do temp_file="$(mktemp)"; while read line; do first_word="$(echo "$line" | cut -d':' -f1)"; if [[ "$first_word" -gt "$threshold" ]]; then echo "$line" >> "$temp_file"; fi; done < "$file"; mv "$temp_file" "$file"; done

cat file.json | while read -r line; do echo "$line" | sed -n 's/{.*"\([a-zA-Z_][a-zA-Z0-9_]*\)":[^"]*"\([^"]*\)".*/\2/p'; done;
while read -r line; do echo "$line" | grep -o "\"[^\"]*\":.*" | sed -E 's/^[[:space:]]*"([^"]*)":[[:space:]]*"([^"]*)".*$/\2/'; done < file.json

for file in /path/to/folder/*.json; do while read -r line; do echo "$line" | grep -o "\"[^\"]*\":.*" | sed -E 's/^[[:space:]]*"([^"]*)":[[:space:]]*"([^"]*)".*$/\2/'; done < "$file"; done

for file in /path/to/folder/*.json; do while read -r line; do timestamp=$(echo "$line" | grep -o "\"[^\"]*\":\"[^\"]*T[^\"]*\"" | head -n1 | cut -d'"' -f4); if [ "$(date +%s -d "$timestamp")" -ge "$(date +%s -d "2023-03-02T00:00:00Z")" ]; then echo "$line" >> /path/to/newer_or_same_date.json; else echo "$line" >> /path/to/older_date.json; fi; done < "$file"; done

current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/.*"timestamp":\([0-9]*\).*/\1/g'); seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ]; then continue; fi; first_key_value=$(echo "$line" | sed 's/^{\"\([^\"]*\)\":.*/\1/g'); echo "$first_key_value"; done < file.json > file_new.json && mv file_new.json file.json

current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/.*"timestamp":\([0-9]*\).*/\1/g'); seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ]; then continue; fi; first_key_value=$(echo "$line" | sed 's/^{\"\([^\"]*\)\":.*/\1/g'); echo "$first_key_value"; done < file.json > file_new.json && mv file_new.json file.json;

current_timestamp=$(date +%s); while read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/.*"timestamp":\([0-9]*\).*/\1/g'); seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ]; then continue; fi; first_key_value=$(echo "$line" | sed 's/^{\"\([^\"]*\)\":.*/\1/g'); echo "$first_key_value"; done < mydata.json | tee mydata_new.json && mv mydata_new.json mydata.json;


current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(date -d "$(echo "$line" | grep -oE "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")" +%s); seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ]; then continue; fi; first_key_value=$(echo "$line" | sed 's/^{\"\([^\"]*\)\":.*/\1/g'); echo "$first_key_value"; done < file.json > file_new.json && mv file_new.json file.json;

echo ' {"timestamp": "2023-03-02 12:35:25.998215", "value": 42}' | grep -oE "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}"


current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(date -d "$(echo "$line" | grep -oE "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}" | sed 's/\./ /')" +%s); seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ]; then continue; fi; first_key_value=$(echo "$line" | sed 's/^{\"\([^\"]*\)\":.*/\1/g'); echo "$first_key_value"; done < file.json > file_new.json && mv file_new.json file.json;


current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(date -d "$(echo "$line" | grep -oE "\"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{6}\"" | sed 's/\./ /' | tr -d '\"')" +%s); seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ]; then continue; fi; first_key_value=$(echo "$line" | sed 's/^{\"\([^\"]*\)\":.*/\1/g'); echo "$first_key_value"; done < file.json > file_new.json && mv file_new.json file.json;

current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/.*"\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/; s/\./ /' | date +%s); if [ -z "$timestamp" ]; then continue; fi; seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ] && [ "$timestamp" -lt "$current_timestamp" ]; then continue; else echo "$line" >> file_new.json; fi; done < file.json && mv file_new.json file.json
current_timestamp=$(date -d "$(date +"%Y-%m-%d %H:%M:%S")" +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/.*"CURRENT_TIMESTAMP":"\([0-9]*-[0-9]*-[0-9]* [0-9]*:[0-9]*:[0-9]*\.[0-9]*\).*$/\1/g'); seconds_since_timestamp=$((current_timestamp - $(date -d "$timestamp" +%s))); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ]; then continue; fi; echo "$line"; done < file.json > file_new.json && mv file_new.json file.json


current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); first_key_value=$(echo "$line" | sed -n 's/^{\s*"\{0,1\}\([[:alnum:]_]\{1,\}\)\{0,1\}"\{0,1\}:\s*"\{0,1\}\([[:alnum:][:punct:]]\{1,\}\)\{0,1\}"\{0,1\}.*/\1/p' | head -n1); timestamp=$(echo "$line" | sed -n 's/^{\s*"\{0,1\}CURRENT_TIMESTAMP"\{0,1\}:\s*"\{0,1\}\([[:alnum:][:punct:][:space:]]\{1,\}\)\{0,1\}"\{0,1\}.*$/\1/p' | head -n1); seconds_since_timestamp=$(($(date -d"$timestamp" +%s) - current_timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -lt "$seconds_in_7_days" ]; then echo "$line"; fi; done < file.json > file_new.json && mv file_new.json file.json




current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/^.*"timestamp":"\([^"]*\)".*/\1/g'); date_timestamp=$(date -d"$timestamp" +%s); seconds_since_timestamp=$((current_timestamp - date_timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ]; then continue; fi; first_key_value=$(echo "$line" | sed 's/^{"\([^"]*\)".*/\1/g'); echo "$line" >> file_new.json; done < file.json && mv file.json file_backup.json && mv file_new.json file.json




current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/^.*"timestamp":"\([^"]*\)".*/\1/g'); date_timestamp=$(date -d"$timestamp" +%s); seconds_since_timestamp=$((current_timestamp - date_timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ]; then continue; fi; first_key_value=$(echo "$line" | sed 's/^{"\([^"]*\)".*/\1/g'); echo "$line" >> file_new.json; done < file.json && mv file.json file_backup.json && mv file_new.json file.json



current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/.*"\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/; s/\./ /' | date +%s); if [ -z "$timestamp" ]; then continue; fi; seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ] || [ "$timestamp" -gt "$current_timestamp" ]; then continue; else echo "$line" >> file_new.json; fi; done < file.json && mv file_new.json file.json




current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/.*"\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/; s/\./ /' | date +%s); if [ -z "$timestamp" ]; then continue; fi; seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ] && [ "$timestamp" -lt "$current_timestamp" ]; then continue; else echo "$line" >> file_new.json; fi; done < file.json && mv file_new.json file.json








current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/.*"\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/; s/\./ /' | date +%s); if [ -z "$timestamp" ]; then continue; fi; seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ] && [ "$timestamp" -lt "$current_timestamp" ]; then continue; else echo "$line" >> file_new.json; fi; done < file.json && mv file_new.json file.json











current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(date -d "$(echo "$line" | grep -oE "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{6}" | sed 's/\./ /')" +%s); seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ] && [ "$timestamp" -lt "$current_timestamp" ]; then continue; fi; first_key_value=$(echo "$line" | sed 's/^{\"\([^\"]*\)\":.*/\1/g'); echo "$first_key_value"; done < file.json > file_new.json && mv file_new.json file.json


current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(date -d "$(echo "$line" | grep -oE "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}" | sed 's/\./ /')" +%s); if [ -z "$timestamp" ]; then continue; fi; seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ] && [ "$timestamp" -lt "$current_timestamp" ]; then continue; fi; first_key_value=$(echo "$line" | sed 's/^{\"\([^\"]*\)\":.*/\1/g'); echo "$first_key_value"; done < file.json > file_new.json && mv file_new.json file.json




current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/.*"\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/; s/\./ /' | date +%s); if [ -z "$timestamp" ]; then continue; fi; seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ] && [ "$timestamp" -lt "$current_timestamp" ]; then continue; fi; first_key_value=$(echo "$line" | sed 's/^{\"\([^\"]*\)\":.*/\1/g'); echo "$first_key_value"; done < file.json > file_new.json && mv file_new.json file.json


current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/.*"\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/; s/\./ /' | date +%s); if [ -z "$timestamp" ]; then continue; fi; seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ] && [ "$timestamp" -lt "$current_timestamp" ]; then echo "$line" >> file_old.json; else echo "$line" >> file_new.json; fi; done < file.json && mv file_new.json file.json
current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/.*"\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/; s/\./ /' | date +%s); if [ -z "$timestamp" ]; then continue; fi; seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ] && [ "$timestamp" -lt "$current_timestamp" ]; then continue; else echo "$line" >> file_new.json; fi; done < file.json && mv file_new.json file.json

current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); timestamp=$(echo "$line" | sed 's/.*"\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/; s/\./ /' | date +%s); if [ -z "$timestamp" ]; then continue; fi; seconds_since_timestamp=$((current_timestamp - timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ] || [ "$timestamp" -gt "$current_timestamp" ]; then continue; else echo "$line" >> file_new.json; fi; done < file.json && mv file_new.json file.json



current_timestamp=$(date +%s); while IFS= read -r line; do timestamp=$(echo "$line" | sed -n 's/^.*"timestamp":"\([^"]*\)".*/\1/p'); seconds_since_timestamp=$((current_timestamp - $(date -d "$timestamp" +%s))); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ]; then continue; fi; echo "$line"; done < file.json > file_new.json && mv file_new.json file.json


current_timestamp=$(date +%s); while IFS= read -r line; do line=$(echo "$line" | tr -d '\n'); first_key_value=$(echo "$line" | sed -n 's/^{\s*"\{0,1\}\([[:alnum:]_]\{1,\}\)\{0,1\}"\{0,1\}:\s*"\{0,1\}\([[:alnum:][:punct:]]\{1,\}\)\{0,1\}"\{0,1\}.*/\1/p' | head -n1); timestamp=$(echo "$line" | sed -n 's/^{\s*"\{0,1\}CURRENT_TIMESTAMP"\{0,1\}:\s*"\{0,1\}\([[:alnum:][:punct:][:space:]]\{1,\}\)\{0,1\}"\{0,1\}.*$/\1/p' | head -n1); seconds_since_timestamp=$(($(date -d"$timestamp" +%s) - current_timestamp)); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -lt "$seconds_in_7_days" ]; then echo "$line"; fi; done < file.json > file_new.json && mv file_new.json file.json



current_timestamp=$(date +%s); while IFS= read -r line; do timestamp=$(echo "$line" | sed -n 's/.*"CURRENT_TIMESTAMP":"\([^"]*\)".*/\1/p'); if [ -n "$timestamp" ]; then seconds_since_timestamp=$((current_timestamp - $(date -d "$timestamp" +%s))); seconds_in_7_days=$((7 * 24 * 60 * 60)); if [ "$seconds_since_timestamp" -gt "$seconds_in_7_days" ]; then continue; fi; echo "$line"; fi; done < file.json > file_new.json && mv file_new.json file.json


